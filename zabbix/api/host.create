#!/usr/bin/env python

import requests
import json
import sys

test_params = {"host":"MylabTestHost",}

def make_request_url(server):
  return "http://" + server + "/zabbix/api_jsonrpc.php"

def check_zabbix_api_response(res, url):
  if res.status_code != requests.codes.ok:
    print "Failed to get auth token: %d: %s, res: %s" % (res.status_code, url, res.text)
    raise IOError

  res_json = res.json()
  if "error" in res_json:
    print "Failed to get auth token: %d: %s, res: %s" % (res.status_code, url, res.text)
  return res_json

def get_auth_token(server):
  headers = {'content-type': 'application/json'}
  payload = {
    "auth":None,
    "method":"user.login",
    "id":1,
    "params":{"password":"zabbix", "user":"admin"},
    "jsonrpc":"2.0",
  }
  url = make_request_url(server)
  res = requests.post(url, data=json.dumps(payload), headers=headers)
  res_json = check_zabbix_api_response(res, url)
  return res_json["result"]

def host_exists(server, auth_token, host):
  headers = {'content-type': 'application/json'}
  url = make_request_url(server)
  payload = {
    "auth":auth_token,
    "method":"host.exists",
    "id":1,
    "params":{
      "host":host,
    },
    "jsonrpc":"2.0",
  }
  res = requests.post(url, data=json.dumps(payload), headers=headers)
  res_json = check_zabbix_api_response(res, url)
  return res_json["result"];

def host_get(server, auth_token, host):
  headers = {'content-type': 'application/json'}
  url = make_request_url(server)
  payload = {
    "auth":auth_token,
    "method":"host.get",
    "id":1,
    "params": {
        "output": "extend",
        "filter": {"host":[host]},
    },
    "jsonrpc":"2.0",
  }
  res = requests.post(url, data=json.dumps(payload), headers=headers)
  res_json = check_zabbix_api_response(res, url)

  # check the result
  num_hosts = len(res_json["result"])
  if num_hosts == 0:
    return None
  elif num_hosts != 1:
    print "The number of returned host is not one (%d)" % num_hosts
    raise AssertionError
  return res_json["result"][0]

def delete_host(server, auth_token, hostid):
  headers = {'content-type': 'application/json'}
  url = make_request_url(server)
  payload = {
    "auth":auth_token,
    "method":"host.delete",
    "id":1,
    "params":[{"hostid":hostid}],
    "jsonrpc":"2.0",
  }
  res = requests.post(url, data=json.dumps(payload), headers=headers)
  res_json = check_zabbix_api_response(res, url)

def create_host(server, auth_token):
  headers = {'content-type': 'application/json'}
  url = make_request_url(server)
  payload = {
    "auth":auth_token,
    "method":"host.create",
    "id":1,
    "params":{
      "host":test_params["host"],
      "groups": [{"groupid": "2"}],
      "interfaces": [{
        "type": 1,
        "main": 1,
        "useip": 1,
        "ip": "192.168.1.33",
        "dns": "",
        "port": "10050"
      }],
      "ipmi_authtype":2,
      "ipmi_password":"foo",
    },
    "jsonrpc":"2.0",
  }
  res = requests.post(url, data=json.dumps(payload), headers=headers)
  res_json = check_zabbix_api_response(res, url)

# main code
target_zabbix_server = "localhost"
print "Target Zabbix Server: %s" % target_zabbix_server
auth_token = get_auth_token(target_zabbix_server)
print "AuthToken           : %s" % auth_token

# check if the host exists
host = host_get(target_zabbix_server, auth_token, test_params["host"])
print "Check test host     : %s" % (not not host)
if host:
  delete_host(target_zabbix_server, auth_token, host["hostid"])
  print "Deleted host        : %s" % host["host"]

# create host
create_host(target_zabbix_server, auth_token)
print "Created host        : %s" % test_params["host"]
